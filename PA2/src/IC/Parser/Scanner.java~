/* The following code was generated by JFlex 1.6.0 */

/* Compile me with:  jflex IC.lex  */
package IC.Parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>src/IC/Parser/IC.lex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\21\1\22\1\1\22\0\1\7\1\61\1\20"+
    "\2\6\1\66\1\62\1\6\1\46\1\47\1\5\1\64\1\54\1\65"+
    "\1\55\1\4\1\16\11\17\1\6\1\53\1\60\1\56\1\57\2\6"+
    "\32\15\1\52\1\10\1\23\1\6\1\13\1\6\1\30\1\24\1\33"+
    "\1\40\1\27\1\42\1\45\1\44\1\35\1\14\1\32\1\26\1\14"+
    "\1\12\1\25\2\14\1\31\1\34\1\11\1\36\1\43\1\41\1\37"+
    "\2\14\1\50\1\63\1\51\7\0\1\21\u1fa2\0\1\21\1\21\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\5\1\6\1\5"+
    "\1\7\2\10\1\11\1\12\12\5\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\1\27\1\30\1\31\1\2\1\32\4\5"+
    "\3\0\1\33\12\5\1\34\3\5\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\0\2\5\1\43\1\5\1\0"+
    "\12\5\1\44\3\5\1\45\1\46\1\47\1\11\3\5"+
    "\1\50\10\5\1\51\1\5\1\52\4\5\1\53\2\5"+
    "\1\54\1\55\1\5\1\56\1\5\1\57\1\5\1\60"+
    "\1\61\1\62\1\63\1\5\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\67\0\245\0\67\0\334\0\u0113"+
    "\0\67\0\u014a\0\u0181\0\67\0\u01b8\0\u01ef\0\67\0\u0226"+
    "\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de"+
    "\0\u0415\0\67\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\67"+
    "\0\67\0\67\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u01ef\0\u0717\0\u06e0\0\u074e\0\u0785\0\u07bc\0\u07f3"+
    "\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u014a\0\u0974"+
    "\0\u09ab\0\u09e2\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u014a\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u014a\0\u0d89\0\u0dc0\0\u0df7\0\u014a\0\u014a\0\u014a"+
    "\0\u06e0\0\u0e2e\0\u0e65\0\u0e9c\0\u014a\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u014a\0\u108b\0\u014a"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u014a\0\u119e\0\u11d5\0\u014a"+
    "\0\u014a\0\u120c\0\u014a\0\u1243\0\u014a\0\u127a\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u12b1\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\2\1\4\1\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\0\1\4\1\17\1\20\1\12\1\21\1\22\1\12"+
    "\1\23\1\12\1\24\1\25\1\26\3\12\1\27\1\30"+
    "\1\31\2\12\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\71\0\1\4\70\0\1\53\1\54"+
    "\72\0\7\12\4\0\5\12\1\55\12\12\1\56\1\12"+
    "\32\0\7\12\4\0\3\12\1\57\6\12\1\60\7\12"+
    "\32\0\7\12\4\0\22\12\32\0\7\13\4\0\22\13"+
    "\37\0\2\15\47\0\1\61\2\0\1\61\4\62\1\63"+
    "\7\62\1\64\2\0\44\62\11\0\7\12\4\0\1\12"+
    "\1\65\3\12\1\66\14\12\32\0\7\12\4\0\3\12"+
    "\1\67\16\12\32\0\7\12\4\0\2\12\1\70\10\12"+
    "\1\71\6\12\32\0\7\12\4\0\3\12\1\72\16\12"+
    "\32\0\7\12\4\0\1\12\1\73\1\74\17\12\32\0"+
    "\1\75\6\12\4\0\22\12\32\0\1\12\1\76\5\12"+
    "\4\0\16\12\1\77\3\12\32\0\7\12\4\0\20\12"+
    "\1\100\1\12\32\0\7\12\4\0\4\12\1\101\15\12"+
    "\32\0\7\12\4\0\1\12\1\102\20\12\77\0\1\103"+
    "\66\0\1\104\66\0\1\105\66\0\1\106\72\0\1\107"+
    "\67\0\1\110\3\0\1\53\1\3\1\4\64\53\4\54"+
    "\1\111\1\112\61\54\11\0\7\12\4\0\12\12\1\113"+
    "\7\12\32\0\7\12\4\0\11\12\1\114\10\12\32\0"+
    "\7\12\4\0\15\12\1\115\4\12\32\0\7\12\4\0"+
    "\2\12\1\116\17\12\21\0\1\61\2\0\16\61\2\0"+
    "\1\117\44\61\2\0\5\61\3\62\5\61\1\62\2\0"+
    "\1\117\43\61\11\0\7\12\4\0\1\12\1\120\20\12"+
    "\32\0\7\12\4\0\3\12\1\121\16\12\32\0\1\12"+
    "\1\122\5\12\4\0\22\12\32\0\7\12\4\0\10\12"+
    "\1\123\11\12\32\0\1\124\6\12\4\0\22\12\32\0"+
    "\1\125\6\12\4\0\22\12\32\0\1\12\1\126\5\12"+
    "\4\0\22\12\32\0\7\12\4\0\4\12\1\127\15\12"+
    "\32\0\7\12\4\0\4\12\1\130\1\131\14\12\32\0"+
    "\1\132\6\12\4\0\22\12\32\0\7\12\4\0\11\12"+
    "\1\133\10\12\32\0\7\12\4\0\2\12\1\134\17\12"+
    "\32\0\7\12\4\0\11\12\1\135\10\12\21\0\5\111"+
    "\1\112\65\111\1\4\1\112\61\111\11\0\7\12\4\0"+
    "\3\12\1\136\16\12\32\0\7\12\4\0\10\12\1\137"+
    "\11\12\32\0\7\12\4\0\2\12\1\140\17\12\21\0"+
    "\1\61\2\0\15\61\1\141\2\0\1\117\43\61\11\0"+
    "\7\12\4\0\2\12\1\142\17\12\32\0\7\12\4\0"+
    "\4\12\1\143\15\12\32\0\7\12\4\0\21\12\1\144"+
    "\32\0\7\12\4\0\3\12\1\145\16\12\32\0\7\12"+
    "\4\0\3\12\1\146\16\12\32\0\7\12\4\0\12\12"+
    "\1\147\7\12\32\0\1\150\6\12\4\0\22\12\32\0"+
    "\7\12\4\0\10\12\1\151\11\12\32\0\1\152\6\12"+
    "\4\0\22\12\32\0\7\12\4\0\11\12\1\153\10\12"+
    "\32\0\7\12\4\0\2\12\1\154\17\12\32\0\7\12"+
    "\4\0\10\12\1\155\11\12\32\0\7\12\4\0\14\12"+
    "\1\156\5\12\32\0\7\12\4\0\3\12\1\157\16\12"+
    "\32\0\7\12\4\0\6\12\1\160\13\12\32\0\1\161"+
    "\6\12\4\0\22\12\32\0\1\12\1\162\5\12\4\0"+
    "\22\12\32\0\7\12\4\0\5\12\1\163\14\12\32\0"+
    "\7\12\4\0\11\12\1\164\10\12\32\0\7\12\4\0"+
    "\10\12\1\165\11\12\32\0\7\12\4\0\11\12\1\166"+
    "\10\12\32\0\1\12\1\167\5\12\4\0\22\12\32\0"+
    "\7\12\4\0\3\12\1\170\16\12\32\0\7\12\4\0"+
    "\3\12\1\171\16\12\32\0\7\12\4\0\4\12\1\172"+
    "\15\12\32\0\7\12\4\0\20\12\1\173\1\12\32\0"+
    "\7\12\4\0\14\12\1\174\5\12\32\0\1\12\1\175"+
    "\5\12\4\0\22\12\32\0\1\12\1\176\5\12\4\0"+
    "\22\12\32\0\7\12\4\0\7\12\1\177\12\12\32\0"+
    "\7\12\4\0\21\12\1\200\32\0\1\12\1\201\5\12"+
    "\4\0\22\12\32\0\7\12\4\0\10\12\1\202\11\12"+
    "\32\0\7\12\4\0\12\12\1\203\7\12\32\0\7\12"+
    "\4\0\3\12\1\204\16\12\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\2\1\1\11\12\1\10\11\6\1\3\11"+
    "\6\1\3\0\17\1\6\11\2\0\4\1\1\0\65\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public int getLineNumber(){
	return yyline;
}

Token tok(int id, String text) { 
	return new Token(id, text, yycolumn, yyline, yytext());
}

Error error(String message, boolean isPrintable){
	int line = yyline + 1;
	int column = yycolumn + 1;
	if (isPrintable){
		return new Error(line + ":" + column + " : lexical error; " + message + "'" + yytext() + "'");
	}
	else{
		return new Error(line + ":" + column + " : lexical error; " + message);
	}
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw error("invalid character", true);
          }
        case 53: break;
        case 2: 
          { /* nothing; skip */
          }
        case 54: break;
        case 3: 
          { return tok(sym.DIV,"/");
          }
        case 55: break;
        case 4: 
          { return tok(sym.MULT,"*");
          }
        case 56: break;
        case 5: 
          { return tok(sym.ID,"ID");
          }
        case 57: break;
        case 6: 
          { throw error("an identifier cannot start with", true);
          }
        case 58: break;
        case 7: 
          { return tok(sym.CLASS_ID,"CLASS_ID");
          }
        case 59: break;
        case 8: 
          { return tok(sym.INTEGER,"INTEGER");
          }
        case 60: break;
        case 9: 
          { throw error("malformed string literal", false);
          }
        case 61: break;
        case 10: 
          { return tok(sym.RSP,"]");
          }
        case 62: break;
        case 11: 
          { return tok(sym.LP,"(");
          }
        case 63: break;
        case 12: 
          { return tok(sym.RP,")");
          }
        case 64: break;
        case 13: 
          { return tok(sym.LCP,"{");
          }
        case 65: break;
        case 14: 
          { return tok(sym.RCP,"}");
          }
        case 66: break;
        case 15: 
          { return tok(sym.LSP,"[");
          }
        case 67: break;
        case 16: 
          { return tok(sym.SEMI_COLONS,";");
          }
        case 68: break;
        case 17: 
          { return tok(sym.COMMA,",");
          }
        case 69: break;
        case 18: 
          { return tok(sym.DOT,".");
          }
        case 70: break;
        case 19: 
          { return tok(sym.ASSIGN,"=");
          }
        case 71: break;
        case 20: 
          { return tok(sym.BT,">");
          }
        case 72: break;
        case 21: 
          { return tok(sym.ST,"<");
          }
        case 73: break;
        case 22: 
          { return tok(sym.NOT,"!");
          }
        case 74: break;
        case 23: 
          { return tok(sym.PLUS,"+");
          }
        case 75: break;
        case 24: 
          { return tok(sym.MINUS,"-");
          }
        case 76: break;
        case 25: 
          { return tok(sym.MOD,"%");
          }
        case 77: break;
        case 26: 
          { throw error("unterminated comment", false);
          }
        case 78: break;
        case 27: 
          { return tok(sym.STRING,"STRING");
          }
        case 79: break;
        case 28: 
          { return tok(sym.IF,"if");
          }
        case 80: break;
        case 29: 
          { return tok(sym.EQUALS,"==");
          }
        case 81: break;
        case 30: 
          { return tok(sym.STE,">=");
          }
        case 82: break;
        case 31: 
          { return tok(sym.BTE,"<=");
          }
        case 83: break;
        case 32: 
          { return tok(sym.NE,"!=");
          }
        case 84: break;
        case 33: 
          { return tok(sym.AND,"&&");
          }
        case 85: break;
        case 34: 
          { return tok(sym.OR,"||");
          }
        case 86: break;
        case 35: 
          { return tok(sym.NEW,"new");
          }
        case 87: break;
        case 36: 
          { return tok(sym.INT,"int");
          }
        case 88: break;
        case 37: 
          { return tok(sym.TRUE,"true");
          }
        case 89: break;
        case 38: 
          { return tok(sym.THIS,"this");
          }
        case 90: break;
        case 39: 
          { return tok(sym.NULL,"null");
          }
        case 91: break;
        case 40: 
          { return tok(sym.ELSE,"else");
          }
        case 92: break;
        case 41: 
          { return tok(sym.VOID,"void");
          }
        case 93: break;
        case 42: 
          { return tok(sym.BREAK,"break");
          }
        case 94: break;
        case 43: 
          { return tok(sym.CLASS,"class");
          }
        case 95: break;
        case 44: 
          { return tok(sym.WHILE,"while");
          }
        case 96: break;
        case 45: 
          { return tok(sym.FALSE,"false");
          }
        case 97: break;
        case 46: 
          { return tok(sym.LENGTH,"length");
          }
        case 98: break;
        case 47: 
          { return tok(sym.RETURN,"return");
          }
        case 99: break;
        case 48: 
          { return tok(sym.STATIC,"static");
          }
        case 100: break;
        case 49: 
          { return tok(sym.TYPE_STRING,"type_string");
          }
        case 101: break;
        case 50: 
          { return tok(sym.BOOLEAN,"boolean");
          }
        case 102: break;
        case 51: 
          { return tok(sym.EXTENDS,"extends");
          }
        case 103: break;
        case 52: 
          { return tok(sym.CONTINUE,"continue");
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return tok(sym.EOF,"EOF");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
