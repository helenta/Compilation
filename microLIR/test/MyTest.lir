# program

############literals#############
str5 : "Invalid array length"
str3 : "30"
str1 : " "
str0 : "Array elements: "
str4 : "Unspecified array length"
str2 : "\n"
#################################

############dispatch table#######
_DV_Quicksort: [_Quicksort_partition, _Quicksort_quicksort, _Quicksort_initArray, _Quicksort_printArray]
#################################


# class Quicksort


#virtual method: partition, Quicksort
_Quicksort_partition:
#INT pivot = a[low]
Move this, R5
MoveField R5.1, R2
Move R2, R3
Move low, R2
MoveArray R3[R2], R4
Move R4, R2
Move R2, pivot
#INT i = low
Move low, R2
Move R2, i
#INT j = high
Move high, R2
Move R2, j
#INT tmp
Move 0, tmp
#while
_Label_while_body_24:
Move 1, R2
Compare 1, R2
JumpFalse _Label_while_end_24
#Statement block line 24
#while
_Label_while_body_25:
#a[i] < pivot
Move this, R7
MoveField R7.1, R2
Move R2, R5
Move i, R2
MoveArray R5[R2], R6
Move R6, R2
Move R2, R3
Move pivot, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_25
Move 1, R4
_Label_less_25:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_25
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_25
_Label_while_end_25:
#while
_Label_while_body_26:
#a[j] > pivot
Move this, R7
MoveField R7.1, R2
Move R2, R5
Move j, R2
MoveArray R5[R2], R6
Move R6, R2
Move R2, R3
Move pivot, R2
Move 0, R4
Compare R3, R2
JumpGE _Label_greater_26
Move 1, R4
_Label_greater_26:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_26
#j = j - 1
Move j, R2
Move R2, R6
Move 1, R2
Sub R2, R6
Move R6, R2
Move R2, R3
Move R3, j
Jump _Label_while_body_26
_Label_while_end_26:
#if
#i <= j
Move i, R2
Move R2, R3
Move j, R2
Move 0, R4
Compare R3, R2
JumpG _Label_greater_equal_28
Move 1, R4
_Label_greater_equal_28:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_28
#break
Jump _Label_while_end_24
JumpFalse _Label_end_if_28
_Label_end_if_28:
#tmp = a[i]
Move this, R8
MoveField R8.1, R2
Move R2, R6
Move i, R2
MoveArray R6[R2], R7
Move R7, R2
Move R2, R3
Move R3, tmp
#a[i] = a[j]
Move this, R8
MoveField R8.1, R2
Move R2, R6
Move j, R2
MoveArray R6[R2], R7
Move R7, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R4
Move i, R2
Move R2, R5
MoveArray R3, R4[R5]
#a[j] = tmp
Move tmp, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R4
Move j, R2
Move R2, R5
MoveArray R3, R4[R5]
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
#j = j - 1
Move j, R2
Move R2, R6
Move 1, R2
Sub R2, R6
Move R6, R2
Move R2, R3
Move R3, j
Jump _Label_while_body_24
_Label_while_end_24:
Move j, R2
Move R2, R9999
Return R9999


#virtual method: quicksort, Quicksort
_Quicksort_quicksort:
#if
#low < high
Move low, R2
Move R2, R3
Move high, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_41
Move 1, R4
_Label_less_41:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_41
#Statement block line 41
#INT mid = partition(low, high)
Move this, R3
# evaluate this 
# evaluate arg 0
Move low, R2
Move R2, R4000
# evaluate arg 1
Move high, R2
Move R2, R4001
VirtualCall R3.0(this = R3, low = R4000, high = R4001), R2
Move R2, mid
Move this, R3
# evaluate this 
# evaluate arg 0
Move low, R2
Move R2, R4000
# evaluate arg 1
Move mid, R2
Move R2, R4001
VirtualCall R3.1(this = R3, low = R4000, high = R4001), R2
Move this, R3
# evaluate this 
# evaluate arg 0
Move mid, R2
Move R2, R4
Move 1, R2
Add R4, R2
Move R2, R4000
# evaluate arg 1
Move high, R2
Move R2, R4001
VirtualCall R3.1(this = R3, low = R4000, high = R4001), R2
JumpFalse _Label_end_if_41
_Label_end_if_41:
Return 9999


#virtual method: initArray, Quicksort
_Quicksort_initArray:
#INT i = 0
Move 0, R2
Move R2, i
#while
_Label_while_body_50:
#i < a.length
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_50
Move 1, R4
_Label_less_50:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_50
#Statement block line 50
#a[i] = random()
# Call random()
Library __random(), R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R4
Move i, R2
Move R2, R5
MoveArray R3, R4[R5]
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_50
_Label_while_end_50:
Return 9999


#virtual method: printArray, Quicksort
_Quicksort_printArray:
#INT i = 0
Move 0, R2
Move R2, i
# Call print("Array elements: ")
# evaluate arg 0
Move str0, R2
Move R2, R4000
Library __print(R4000), R2
#while
_Label_while_body_60:
#i < a.length
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_60
Move 1, R4
_Label_less_60:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_60
#Statement block line 60
# Call printi(a[i])
# evaluate arg 0
Move this, R5
MoveField R5.1, R2
Move R2, R3
Move i, R2
MoveArray R3[R2], R4
Move R4, R2
Move R2, R4000
Library __printi(R4000), R2
# Call print(" ")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __print(R4000), R2
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_60
_Label_while_end_60:
# Call print("\n")
# evaluate arg 0
Move str2, R2
Move R2, R4000
Library __print(R4000), R2
Return 9999


#static method: main, Quicksort
_ic_main:
#STRING[]x1 args = new STRING[]x1[1]
Move 1, R2
Mul 4, R2
Library __allocateArray(R2), R3
Move R3, R2
Move R2, args
#args[0] = "30"
Move str3, R2
Move R2, R3
Move args, R2
Move R2, R4
Move 0, R2
Move R2, R5
MoveArray R3, R4[R5]
#INT n
Move 0, n
#if
#args.length != 1
Move args, R2
Move R2, R5
ArrayLength R5, R2
Move R2, R3
Move 1, R2
Move 0, R4
Compare R3, R2
JumpTrue _Label_not_equal_73
Move 1, R4
_Label_not_equal_73:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_73
#Statement block line 73
# Call println("Unspecified array length")
# evaluate arg 0
Move str4, R2
Move R2, R4000
Library __println(R4000), R2
# Call exit(1)
# evaluate arg 0
Move 1, R2
Move R2, R4000
Library __exit(R4000), R2
JumpFalse _Label_end_if_73
_Label_end_if_73:
#n = stoi(args[0])
# Call stoi(args[0])
# evaluate arg 0
Move args, R2
Move R2, R6
Move 0, R2
MoveArray R6[R2], R7
Move R7, R2
Move R2, R4000
Library __stoi(R4000), R2
Move R2, R3
Move R3, n
#if
#n >= 0
Move n, R2
Move R2, R3
Move 0, R2
Move 0, R4
Compare R3, R2
JumpL _Label_less_equal_79
Move 1, R4
_Label_less_equal_79:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_79
#Statement block line 79
# Call println("Invalid array length")
# evaluate arg 0
Move str5, R2
Move R2, R4000
Library __println(R4000), R2
# Call exit(1)
# evaluate arg 0
Move 1, R2
Move R2, R4000
Library __exit(R4000), R2
JumpFalse _Label_end_if_79
_Label_end_if_79:
#Quicksort s = new Quicksort()
#new Quicksort()
Library __allocateObject(8), R3
MoveField _DV_Quicksort, R3.0
Move R3, R2
Move R2, s
#a.s = new INT[]x1[n]
Move n, R2
Mul 4, R2
Library __allocateArray(R2), R6
Move R6, R2
Move R2, R3
Move s, R2
MoveField R3, R2.1
Move s, R2
Move R2, R3
# evaluate this 
VirtualCall R3.2(this = R3), R2
Move s, R2
Move R2, R3
# evaluate this 
VirtualCall R3.3(this = R3), R2
Move s, R2
Move R2, R3
# evaluate this 
# evaluate arg 0
Move 0, R2
Move R2, R4000
# evaluate arg 1
Move n, R2
Move R2, R4
Move 1, R2
Sub R2, R4
Move R4, R2
Move R2, R4001
VirtualCall R3.1(this = R3, low = R4000, high = R4001), R2
Move s, R2
Move R2, R3
# evaluate this 
VirtualCall R3.3(this = R3), R2
Library __exit(0),R0
Return 9999

