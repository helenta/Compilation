# program

############literals#############
str5 : ""
str6 : "Invalid array length"
str3 : "100"
str2 : " "
str0 : "Primes less than "
str1 : ": "
str4 : "Unspecified number."
#################################

############dispatch table#######
_DV_Sieve: [_Sieve_initArray, _Sieve_sieveAll, _Sieve_sieve, _Sieve_printPrimes, _Sieve_test]
#################################


# class Sieve


#virtual method: initArray, Sieve
_Sieve_initArray:
#INT i = 0
Move 0, R2
Move R2, i
#while
_Label_while_body_20:
#i < num.length
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_20
Move 1, R4
_Label_less_20:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_20
#Statement block line 20
#num[i] = i
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R4
Move i, R2
Move R2, R5
MoveArray R3, R4[R5]
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_20
_Label_while_end_20:
Return 9999


#virtual method: sieveAll, Sieve
_Sieve_sieveAll:
#INT i = 2
Move 2, R2
Move R2, i
#while
_Label_while_body_28:
#i < num.length
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_28
Move 1, R4
_Label_less_28:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_28
#Statement block line 28
Move this, R3
# evaluate this 
# evaluate arg 0
Move i, R2
Move R2, R4000
VirtualCall R3.2(this = R3, n = R4000), R2
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_28
_Label_while_end_28:
Return 9999


#virtual method: sieve, Sieve
_Sieve_sieve:
#INT i = 2 * n
Move 2, R2
Move R2, R3
Move n, R2
Mul R3, R2
Move R2, i
#while
_Label_while_body_36:
#i < num.this.length
Move i, R2
Move R2, R3
Move this, R2
MoveField R2.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_36
Move 1, R4
_Label_less_36:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_36
#Statement block line 36
#num.this[i] = 0
Move 0, R2
Move R2, R3
Move this, R2
MoveField R2.1, R2
Move R2, R4
Move i, R2
Move R2, R5
MoveArray R3, R4[R5]
#i = i + n
Move i, R2
Move R2, R6
Move n, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_36
_Label_while_end_36:
Return 9999


#virtual method: printPrimes, Sieve
_Sieve_printPrimes:
#INT i = 2
Move 2, R2
Move R2, i
# Call print("Primes less than ")
# evaluate arg 0
Move str0, R2
Move R2, R4000
Library __print(R4000), R2
# Call printi(num.length)
# evaluate arg 0
Move this, R4
MoveField R4.1, R2
Move R2, R3
ArrayLength R3, R2
Move R2, R4000
Library __printi(R4000), R2
# Call print(": ")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __print(R4000), R2
#while
_Label_while_body_47:
#i < num.length
Move i, R2
Move R2, R3
Move this, R6
MoveField R6.1, R2
Move R2, R5
ArrayLength R5, R2
Move 0, R4
Compare R3, R2
JumpLE _Label_less_47
Move 1, R4
_Label_less_47:
Move R4, R2
Compare 1, R2
JumpFalse _Label_while_end_47
#Statement block line 47
#if
#num[i] != 0
Move this, R7
MoveField R7.1, R2
Move R2, R5
Move i, R2
MoveArray R5[R2], R6
Move R6, R2
Move R2, R3
Move 0, R2
Move 0, R4
Compare R3, R2
JumpTrue _Label_not_equal_48
Move 1, R4
_Label_not_equal_48:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_48
#Statement block line 48
# Call printi(num[i])
# evaluate arg 0
Move this, R5
MoveField R5.1, R2
Move R2, R3
Move i, R2
MoveArray R3[R2], R4
Move R4, R2
Move R2, R4000
Library __printi(R4000), R2
# Call print(" ")
# evaluate arg 0
Move str2, R2
Move R2, R4000
Library __print(R4000), R2
JumpFalse _Label_end_if_48
_Label_end_if_48:
#i = i + 1
Move i, R2
Move R2, R6
Move 1, R2
Add R6, R2
Move R2, R3
Move R3, i
Jump _Label_while_body_47
_Label_while_end_47:
Return 9999


#static method: main, Sieve
_ic_main:
#STRING[]x1 args = new STRING[]x1[1]
Move 1, R2
Mul 4, R2
Library __allocateArray(R2), R3
Move R3, R2
Move R2, args
#args[0] = "20"
Move str3, R2
Move R2, R3
Move args, R2
Move R2, R4
Move 0, R2
Move R2, R5
MoveArray R3, R4[R5]
#new Sieve()
Library __allocateObject(8), R4
MoveField _DV_Sieve, R4.0
Move R4, R2
Move R2, R3
# evaluate this 
# evaluate arg 0
Move args, R2
Move R2, R4000
VirtualCall R3.4(this = R3, args = R4000), R2
Library __exit(0),R0
Return 9999


#virtual method: test, Sieve
_Sieve_test:
#INT n
Move 0, n
#if
#args.length != 1
Move args, R2
Move R2, R5
ArrayLength R5, R2
Move R2, R3
Move 1, R2
Move 0, R4
Compare R3, R2
JumpTrue _Label_not_equal_66
Move 1, R4
_Label_not_equal_66:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_66
#Statement block line 66
# Call println("Unspecified number.")
# evaluate arg 0
Move str4, R2
Move R2, R4000
Library __println(R4000), R2
Move 0, R9999
Return R9999
JumpFalse _Label_end_if_66
_Label_end_if_66:
# Call println("")
# evaluate arg 0
Move str5, R2
Move R2, R4000
Library __println(R4000), R2
#n = stoi(args[0])
# Call stoi(args[0])
# evaluate arg 0
Move args, R2
Move R2, R6
Move 0, R2
MoveArray R6[R2], R7
Move R7, R2
Move R2, R4000
Library __stoi(R4000), R2
Move R2, R3
Move R3, n
#if
#n >= 0
Move n, R2
Move R2, R3
Move 0, R2
Move 0, R4
Compare R3, R2
JumpL _Label_less_equal_73
Move 1, R4
_Label_less_equal_73:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_73
#Statement block line 73
# Call println("Invalid array length")
# evaluate arg 0
Move str6, R2
Move R2, R4000
Library __println(R4000), R2
Move 0, R9999
Return R9999
JumpFalse _Label_end_if_73
_Label_end_if_73:
#num = new INT[]x1[n]
Move n, R2
Mul 4, R2
Library __allocateArray(R2), R6
Move R6, R2
Move R2, R3
Move this, R4
MoveField R3, R4.1
Move this, R3
# evaluate this 
VirtualCall R3.0(this = R3), R2
Move this, R3
# evaluate this 
VirtualCall R3.1(this = R3), R2
Move this, R3
# evaluate this 
VirtualCall R3.3(this = R3), R2
# Call println("")
# evaluate arg 0
Move str5, R2
Move R2, R4000
Library __println(R4000), R2
Return 9999

