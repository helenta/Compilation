# program

############literals#############
str1 : ""
str0 : "Test String"
#################################

############dispatch table#######
_DV_A: [_A_g, _A_t]
#################################


# class A


#static method: momo, A
_A_momo:
Move 5, R2
Move R2, R9999
Return R9999


#virtual method: g, A
_A_g:
Move this, R9998
Return 9999


#virtual method: t, A
_A_t:
Move this, R9998
#y = 7
Move 7, R2
Move R2, R3
MoveField R3, R9998.1
MoveField R9998.1, R2
Move R2, R9999
Return R9999


# class Sieve


#static method: main, Sieve
_ic_main:
#Sieve sieve = new Sieve()
#new Sieve()
Library __allocateObject(16), R3
Move R3, R2
Move R2, sieve
#xC.sieve = 4
Move 4, R2
Move R2, R3
Move sieve, R2
MoveField R3, R2.1
#a.sieve = new A()
#new A()
Library __allocateObject(16), R6
MoveField _DV_A, R6.0
Move R6, R2
Move R2, R3
Move sieve, R2
MoveField R3, R2.3
#y.a.sieve = 1
Move 1, R2
Move R2, R3
Move sieve, R2
MoveField R2.3, R2
MoveField R3, R2.1
#b.a.sieve = true
Move 1, R2
Move R2, R3
Move sieve, R2
MoveField R2.3, R2
MoveField R3, R2.2
#boo.a.sieve = new BOOLEAN[]x1[2]
Move 2, R2
Mul 4, R2
Library __allocateArray(R2), R6
Move R6, R2
Move R2, R3
Move sieve, R2
MoveField R2.3, R2
MoveField R3, R2.3
#boo.a.sieve[y.a.sieve - 1] = b.a.sieve
Move sieve, R2
MoveField R2.3, R2
MoveField R2.2, R2
Move R2, R3
Move sieve, R2
MoveField R2.3, R2
MoveField R2.3, R2
Move R2, R4
Move sieve, R2
MoveField R2.3, R2
MoveField R2.1, R2
Move R2, R6
Move 1, R2
Sub R2, R6
Move R6, R2
Move R2, R5
MoveArray R3, R4[R5]
#INT i = 1
Move 1, R2
Move R2, i
#INT j = i + 5
Move i, R2
Move R2, R3
Move 5, R2
Add R3, R2
Move R2, j
#j = 500
Move 500, R2
Move R2, R3
Move R3, j
#BOOLEAN d = false
Move 0, R2
Move R2, d
#while
_Label_while_body_42:
#LNEG d
Move d, R2
Move R2, R3
Move 1, R2
Xor R3, R2
Compare 1, R2
JumpFalse _Label_while_end_42
#Statement block line 43
#j = j - 100
Move j, R2
Move R2, R6
Move 100, R2
Sub R2, R6
Move R6, R2
Move R2, R3
Move R3, j
#if
#j % 3 == 0
Move j, R2
Move R2, R5
Move 3, R2
Mod R2, R5
Move R5, R2
Move R2, R3
Move 0, R2
Move 0, R4
Compare R3, R2
JumpFalse _Label_less_equal_45
Move 1, R4
_Label_less_equal_45:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_45
#Statement block line 46
#break
Jump _Label_while_end_42
JumpFalse _Label_end_if_45
_Label_end_if_45:
#d = true
Move 1, R2
Move R2, R3
Move R3, d
# evaluate arg 0
Move 1, R2
Move R2, R4000
# evaluate arg 1
Move str0, R2
Move R2, R4001
# evaluate arg 2
Move 4, R2
Move R2, R4002
# evaluate arg 3
Move 1, R2
Move R2, R4003
StaticCall _Sieve_testFunc(t = R4000, h = R4001, y = R4002, g = R4003), R2
Jump _Label_while_body_42
_Label_while_end_42:
# Call printi(t())
# evaluate arg 0
Move sieve, R2
MoveField R2.3, R2
Move R2, R3
# evaluate this 
Move R3, R9998
VirtualCall R3.1(this = R9998), R2
Move R2, R4000
Library __printi(R4000), Rdummy
Library __exit(0),R0
Return 9999


#static method: testFunc, Sieve
_Sieve_testFunc:
# Call printi(t)
# evaluate arg 0
Move t, R2
Move R2, R4000
Library __printi(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call println(h)
# evaluate arg 0
Move h, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call printi(y)
# evaluate arg 0
Move y, R2
Move R2, R4000
Library __printi(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call printb(g)
# evaluate arg 0
Move g, R2
Move R2, R4000
Library __printb(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
Return 9999


#static method: add, Sieve
_Sieve_add:
Move x1, R2
Move R2, R3
Move x2, R2
Add R3, R2
Move R2, R9999
Return R9999

