# program
str1 : ""
str0 : "Test String"


# class A



#static method: momo, A
_A_momo:
Move 5, R2
Move R2, R9999
Return R9999


# class Sieve



#static method: main, Sieve
_ic_main:
#Sieve sieve = new Sieve()
#new Sieve()
Library __allocateObject(12), R3
Move R3, R2
Move R2, sieve
#xC.sieve = 4
Move 4, R2
#INT i = 1
Move 1, R2
Move R2, i
#INT j = i + 5
Move i, R2
Move R2, R3
Move 5, R2
Add R3, R2
Move R2, j
#j = 500
Move 500, R2
Move R2, j
#BOOLEAN d = false
Move 0, R2
Move R2, d
#while
_Label_while_body_23:
#LNEG d
Move d, R2
Move R2, R3
Move 1, R2
Xor R3, R2
Compare 1, R2
JumpFalse _Label_while_end_23
#Statement block line 24
#j = j - 100
Move j, R2
Move R2, R3
Move 100, R2
Sub R2, R3
Move R3, R2
Move R2, j
#if
#j % 3 == 0
Move j, R2
Move R2, R5
Move 3, R2
Mod R2, R5
Move R5, R2
Move R2, R3
Move 0, R2
Move 0, R4
Compare R3, R2
JumpFalse _Label_less_equal_26
Move 1, R4
_Label_less_equal_26:
Move R4, R2
Compare 1, R2
JumpFalse _Label_end_if_26
#Statement block line 27
#break
Jump _Label_while_end_23
JumpFalse _Label_end_if_26
_Label_end_if_26:
#d = true
Move 1, R2
Move R2, d
# evaluate arg 0
Move 1, R2
Move R2, R4000
# evaluate arg 1
Move str0, R2
Move R2, R4001
# evaluate arg 2
Move 4, R2
Move R2, R4002
# evaluate arg 3
Move 1, R2
Move R2, R4003
StaticCall _Sieve_testFunc(t = R4000, h = R4001, y = R4002, g = R4003), R2
Jump _Label_while_body_23
_Label_while_end_23:
# Call printi(xC.sieve + add(j + j, 4 + momo()))
# evaluate arg 0
Move R2, R3
# evaluate arg 0
Move j, R2
Move R2, R4
Move j, R2
Add R4, R2
Move R2, R4000
# evaluate arg 1
Move 4, R2
Move R2, R4
# Call momo()
StaticCall _A_momo(), R2
Add R4, R2
Move R2, R4001
StaticCall _Sieve_add(x1 = R4000, x2 = R4001), R2
Add R3, R2
Move R2, R4000
Library __printi(R4000), Rdummy
Library __exit(0),R0
Return 9999



#static method: testFunc, Sieve
_Sieve_testFunc:
# Call printi(t)
# evaluate arg 0
Move t, R2
Move R2, R4000
Library __printi(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call println(h)
# evaluate arg 0
Move h, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call printi(y)
# evaluate arg 0
Move y, R2
Move R2, R4000
Library __printi(R4000), Rdummy
# Call println("")
# evaluate arg 0
Move str1, R2
Move R2, R4000
Library __println(R4000), Rdummy
# Call printb(g)
# evaluate arg 0
Move g, R2
Move R2, R4000
Library __printb(R4000), Rdummy
Return 9999



#static method: add, Sieve
_Sieve_add:
Move x1, R2
Move R2, R3
Move x2, R2
Add R3, R2
Move R2, R9999
Return R9999

