package IC.Parser;

import IC.AST.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code  {:

	public boolean printTokens;
	
	private Scanner lexer;
	private ArrayList<Token> all_tokens;
	private int curr_token_index = -1;
	
	private Token currentToken;

	public LibParser(Scanner lexer) {
		super(lexer);
		this.lexer = lexer;
		this.all_tokens = new ArrayList<Token>();
	}
	
	public Token next_token() throws IOException{
	    curr_token_index++;
		currentToken = lexer.next_token();
		all_tokens.add(currentToken);
		return currentToken;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) 
	{
		Token tok = (Token)s;
	
		List<Integer> ids = this.expected_token_ids();
		StringBuffer expectedTokens = new StringBuffer();
		for (Integer id : ids)
		{
			expectedTokens.append('\'');
   			expectedTokens.append(sym.terminalNames[id]);
   			expectedTokens.append('\'');
   			expectedTokens.append(" or ");
		}
		
		int length = expectedTokens.length();
		if (length > 0)
		{
			expectedTokens.delete(length-4, length);
		}
	
		String userMessage = tok.getRow() + ":" + tok.getColumn() + " : " +
							 "syntax error; expected " + expectedTokens.toString() + 
							 ", but found \'" + tok.getTag() + "\'";
							 
		System.out.println(userMessage);
	}
:}

// This is just for debugging
scan with {:
	Token t = next_token();
	if (printTokens)
		System.out.println(t.getLine() + ":" + t);
	return t; 
:};


////////////////////////////////////////////
// Symbol list (terminals and non-terminals)

terminal BOOLEAN;
  terminal BREAK;
  terminal CLASS;
  terminal CONTINUE;
  terminal ELSE;
  terminal EXTENDS;
  terminal INT;
  terminal NEW;
  terminal IF;
  terminal RETURN;
  terminal VOID;
  terminal STATIC;
  terminal WHILE;
  terminal THIS;
  terminal LENGTH;
  terminal TYPE_STRING;
  
  //BOOLEAN LITERALS
  terminal TRUE;
  terminal FALSE;
  terminal NULL;
  
  //SEPARATORS
  terminal LP;  // '('
  terminal RP;  // ')'
  terminal RCP; // '}'
  terminal LCP; // '{'
  terminal LSP; // '['
  terminal RSP; // ']'
  terminal SEMI_COLONS; // ';'
  terminal COMMA; // ','
  terminal DOT; // '.'
  
  //OPERATORS  
  terminal ASSIGN; // '='
  terminal BT; // '>' Bigger Than
  terminal ST; // '<' Smaller Than
  terminal NOT; // '!' NOT
  terminal EQUALS; // '==' Bigger Than
  terminal BTE; // '>=' Bigger Than Equal
  terminal STE; // '<=' Smaller Than Equal
  terminal NE; // '!=' Not Equal
  terminal AND; // '&&'
  terminal OR; // '||'
  terminal PLUS; // '+' 
  terminal MINUS; // '-'
  terminal MULT; // '*'
  terminal DIV; // '/'
  terminal MOD; // '%'
  
  terminal INTEGER;
  terminal ID;
  terminal CLASS_ID;
  terminal STRING;


///// Non terminals /////
non terminal program;
non terminal multiLibic;
non terminal libic;
non terminal multylibmethod;
non terminal libmethod;
non terminal libMethodArgument;
non terminal libMethodArgumentsList;
non terminal typeV;
non terminal typeNoBrc;
non terminal type;


/// precedence ///

precedence left program;

///// Grammar ///

 Program ::= multiLibic:ml {: RESULT = new Program((List<ICClass>)ml); :};

 multiLibic ::= 
 		libic:lib 
 			{: 
	 			List<ICClass> libList = new ArrayList<ICClass>();
				libList.add((ICClass)lib);
				RESULT = libList;
			:}
 		
 		| multiLibic:libList libic:lib 
 			{:
 				((List<ICClass>)libList).add((ICClass)lib);
 				RESULT = libList;
 			:};
 		
libic ::= 
	CLASS:tok CLASS_ID:id LCP multylibmethod:lib_method_list RCP SEMI_COLONS
		{:
			RESULT = new ICClass(tokleft, id.toString(), new ArrayList<Field>(), (List<Method>)lib_method_list);
		:}
	| CLASS:tok CLASS_ID:id LCP multylibmethod:lib_method_list RCP
		{:
			RESULT = new ICClass(tokleft, id.toString(), new ArrayList<Field>(), (List<Method>)lib_method_list);
		:}
;

multylibmethod ::= 
	multylibmethod:method_list libmethod:method 
		{:
			((List<Method>)method_list).add((Method)method);
			RESULT = method_list;
		:}
	| libmethod:method
		{:
			List<LibraryMethod> methodList = new ArrayList<LibraryMethod>();
			methodList.add((LibraryMethod)method);
			RESULT = methodList;
		:}
; 

libmethod ::= 
	STATIC typeV:type ID:id LP RP SEMI_COLONS
		{:
			int currIndex = curr_token_index;
			ArrayList<Token> allTokens = all_tokens;
			String fg = currentToken.getText();
			RESULT = new LibraryMethod((Type)type, id.toString(), new ArrayList<Formal>());//(List<Formal>)formal_list);
		:}
	| STATIC typeV:type ID:id LP libMethodArgumentsList:args_list RP SEMI_COLONS
		{:
			int currIndex = curr_token_index;
			ArrayList<Token> allTokens = all_tokens;
			String fg = currentToken.getText();
			RESULT = new LibraryMethod((Type)type, id.toString(), (List<Formal>)args_list);
		:}
;

libMethodArgumentsList ::=
	libMethodArgument:arg
		{:
			List<Formal> myList = new ArrayList<Formal>();
			myList.add((Formal)arg);
			RESULT = myList; 
		:}
	| libMethodArgument:arg COMMA libMethodArgumentsList:args_list
		{:
			((List<Formal>)args_list).add((Formal)arg);
			RESULT = args_list; 
		:}
;

libMethodArgument ::= 
	type:t ID:id
		{:
			RESULT = new Formal((Type)t, id.toString());
		:}
;

typeV ::= 	
	type:t				
		{: 
			RESULT = t;
		:}
	| VOID:v
		{: 
			RESULT = new PrimitiveType(vleft, DataTypes.VOID); 
		:}
;

type ::= typeNoBrc:t 
		 {:
			RESULT = t;
		 :}
		 | typeNoBrc:t LSP RSP
		 {:
		 	((Type)t).incrementDimension();
		 	RESULT = t;
		 :}
;

typeNoBrc ::= 
	INT:tok
	{:
		RESULT = new PrimitiveType(tokleft, DataTypes.INT);
	:}
	| BOOLEAN:tok
	{:
		RESULT = new PrimitiveType(tokleft, DataTypes.BOOLEAN);
	:}
	| TYPE_STRING:tok
	{:
		RESULT = new PrimitiveType(tokleft, DataTypes.STRING);
	:}
	| CLASS_ID:tok
	{:
		RESULT = new Type(tokleft, tok.toString());
	:}
;